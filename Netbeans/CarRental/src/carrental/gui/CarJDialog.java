/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package carrental.gui;

import carrental.model.Car;
import carrental.model.IModel;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Gabor Farkas <info@gfarkas.com>
 */
public class CarJDialog extends javax.swing.JDialog implements TableModelListener {

    private IModel model;
    private List<Car> cars;
    private DefaultTableModel dtm;

    public CarJDialog(java.awt.Frame parent, IModel model) {
        super(parent, true);
        initComponents();

        this.model = model;

        setLocationRelativeTo(parent);
        setTitle("Car manager");

        try {

            cars = model.getAllCar();

        } catch (NullPointerException ex) {

        } catch (SQLException ex) {

            MainWindow.networkError(this, ex);

        }

        dtm = (DefaultTableModel) carsJTable.getModel();
        dtm.addTableModelListener(this);

        updateTable();

    }

    private void updateTable() {

        dtm.getDataVector().clear();
        dtm.fireTableDataChanged();

        for (Car car : cars) {

            Vector row = new Vector();

            try {

                car = (Car) model.getCarMap().get(car.getId());

            } catch (SQLException ex) {

                MainWindow.networkError(this, ex);

            }

            row.add(car.getId());
            row.add(car.getName());
            row.add(car.getSeats());
            row.add(car.getDoors());
            row.add(car.isAirConditioning());
            row.add(car.isManualGearbox());

            dtm.addRow(row);

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        carsJTable = new javax.swing.JTable();
        addNewCarJButton = new javax.swing.JButton();
        deleteJButton = new javax.swing.JButton();
        closeJButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        carsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Seats", "Doors", "A / C", "manual"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        carsJTable.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(carsJTable);
        carsJTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        addNewCarJButton.setText("Add new car");
        addNewCarJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewCarJButtonActionPerformed(evt);
            }
        });

        deleteJButton.setText("Delete selected cars");
        deleteJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteJButtonActionPerformed(evt);
            }
        });

        closeJButton.setText("Close");
        closeJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 515, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(closeJButton)
                    .addComponent(deleteJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addNewCarJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addNewCarJButton, closeJButton, deleteJButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addNewCarJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(128, 128, 128)
                        .addComponent(deleteJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(closeJButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 10, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {addNewCarJButton, closeJButton, deleteJButton});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addNewCarJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewCarJButtonActionPerformed

        Vector row = new Vector();
        Car car = new Car("", 0, 0, false, false);
        int id = 0;

        try {

            id = model.addCar(car);
           
        } catch (SQLException ex) {

            MainWindow.networkError(this, ex);

        }

        row.add(0, id);
        dtm = (DefaultTableModel) carsJTable.getModel();
        dtm.addRow(row);

    }//GEN-LAST:event_addNewCarJButtonActionPerformed

    private void closeJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeJButtonActionPerformed

        try {

            Map<Integer, Car> carMap = model.getCarMap();

            for (Map.Entry<Integer, Car> entry : carMap.entrySet()) {

                if (((Car) entry.getValue()).getName().equals("")) {

                    model.deleteCar(entry.getValue());

                }

            }

        } catch (SQLException ex) {

            MainWindow.networkError(this, ex);

        }

        setVisible(false);

    }//GEN-LAST:event_closeJButtonActionPerformed

    private void deleteJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteJButtonActionPerformed

        try {

            int[] selectedRows = carsJTable.getSelectedRows();
            int[] ids = new int[selectedRows.length];

            if (selectedRows.length > 0) {
                for (int i = selectedRows.length - 1; i >= 0; i--) {

                    ids[i] = (int) dtm.getValueAt(selectedRows[i], 0);

                    if (ids[i] != 0) {

                        dtm.removeRow(selectedRows[i]);
                        Car car = model.getCarMap().get(ids[i]);
                        model.deleteCar(car);

                    } else {
                        
                        JOptionPane.showMessageDialog(rootPane, "You can't delete this!");
                        
                    }

                }

            }

        } catch (SQLException ex) {

            MainWindow.networkError(this, ex);

        }

    }//GEN-LAST:event_deleteJButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CarJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CarJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CarJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CarJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNewCarJButton;
    private javax.swing.JTable carsJTable;
    private javax.swing.JButton closeJButton;
    private javax.swing.JButton deleteJButton;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void tableChanged(TableModelEvent e) {

        if (e.getType() == TableModelEvent.UPDATE
                && e.getFirstRow() >= 0 && e.getColumn() >= 0) {

            int rowIndex = e.getFirstRow();
            int columnIndex = e.getColumn();

            Object newValue = dtm.getValueAt(rowIndex, columnIndex);

            try {

                cars = model.getAllCar();

            } catch (SQLException ex) {

                MainWindow.networkError(this, ex);

            }

            Car car = cars.get(rowIndex);

            switch (columnIndex) {

                case 1:
                    car.setName((String) newValue);
                    break;

                case 2:
                    car.setSeats((int) newValue);
                    break;

                case 3:
                    car.setDoors((int) newValue);
                    break;

                case 4:
                    car.setAirConditioning((boolean) newValue);
                    break;

                case 5:
                    car.setManualGearbox((boolean) newValue);
                    break;

            }

            try {

                model.updateCar(car);
                cars = model.getAllCar();

            } catch (SQLException ex) {

                MainWindow.networkError(this, ex);

            }

        }

    }
}
