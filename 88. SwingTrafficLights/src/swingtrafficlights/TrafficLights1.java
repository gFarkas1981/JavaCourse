/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package swingtrafficlights;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.KeyStroke;

/**
 *
 * @author Gabor Farkas <info@gfarkas.com>
 */
public class TrafficLights1 extends javax.swing.JPanel {

    private TrafficLightModel model;

    public TrafficLights1() {

        initComponents();

        model = new TrafficLightModel(true, false, false, true, false, false, true, false, false,true, false, false);

        TrafficLightRunner1 trafficLightRunner1 = new TrafficLightRunner1(model, this);
        (new Thread(trafficLightRunner1)).start();

        getInputMap(WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke("R"), "red");
        getInputMap(WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke("Y"), "yellow");
        getInputMap(WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke("G"), "green");

        getActionMap().put("red", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {

                model.switchRed1();
                repaint();

            }
        });

        getActionMap().put("yellow", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {

                model.switchYellow1();
                repaint();

            }
        });

        getActionMap().put("green", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {

                model.switchGreen1();
                repaint();

            }
        });



    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        g.fillRect(50, 50, 70, 190);

        if (model.isRed1()) {

            g.setColor(Color.RED);
            g.fillOval(60, 60, 50, 50);

        } else {

            g.setColor(Color.RED);
            g.drawOval(60, 60, 50, 50);

        }

        if (model.isYellow1() && model.isRed1()) {

            try {

                final BufferedImage image = ImageIO.read(new File("src/resources/images/smiley.png"));
                g.drawImage(image, 60, 120, this);

            } catch (IOException ex) {

                System.out.println("No image");

            }

        } else if (model.isYellow1() && !model.isRed1()) {

            g.setColor(Color.YELLOW);
            g.fillOval(60, 120, 50, 50);

        } else {

            g.setColor(Color.YELLOW);
            g.drawOval(60, 120, 50, 50);

        }

        if (model.isGreen1()) {

            g.setColor(Color.GREEN);
            g.fillOval(60, 180, 50, 50);

        } else {

            g.setColor(Color.GREEN);
            g.drawOval(60, 180, 50, 50);

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 174, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 356, Short.MAX_VALUE)
        );
    }// </editor-fold>


    // Variables declaration - do not modify
    // End of variables declaration
}
